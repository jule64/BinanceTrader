
        //return new Promise((r, e) => r("TEST OK"));



    ws.on('formattedMessage', (data) => {
        if(data.eventType === 'aggTrade'){
            // don't log any msg
        } else {
            console.info('formattedMessage channel.  received message: ', data);
        }
    });

// TODO old ftx api calls
//     ws.on('update', async data => {
//         if (data.type === "update") {
//
//             if (data.channel === "fills") {
//
//                 Logger.info("received a fill for: ", data);
//                 const ticker = data.data.market;
//                 const fill = {
//                     market: ticker,
//                     size: data.data.size
//                 };
//                 sio.emit('orders:fill', fill);
//
//                 const bal = await getNonNullBalances(rc);
//
//
//                 const balancesJson = buildAccountAndCoinBalances(bal, [ticker]);
//                 updateAppStateBalances(balancesJson);
//                 sio.emit('balances:update', balancesJson);
//
//
//                 bal.map(balances => buildAccountAndCoinBalances(balances, [ticker]))
//                     .map(balancesJson => {
//                         Logger.info('sending account and coin balances');
//                         sio.emit('balances:update', balancesJson);
//                     });
//
//                 bal.map(async balances => {
//                     Logger.info('update book cost for coin');
//                     ftxRestCli.getOrderHistory({market: ticker})
//                         .then(orderHistory =>
//                             PnL.buildCoinBookCost(CoinUtils.parseCoinFromTicker(ticker), bookCostmap, balances, orderHistory))
//                         .catch(err => Logger.warn("Error getting order history from FTX", err));
//                 });
//
//             }
//         }
//     });









# User Data streams:

## WS event received after market order:

### on wsClient.on('formattedMessage' steam:

received two "executionReport" messages:
one with `orderStatus` = "NEW"
 and one with `orderStatus` = "FILLED"


data = Object {eventType: "executionReport",
eventTime: 1670160185552,
symbol: "ETHBUSD",
newClientOrderId: "x-U5D79M5BWupab1WDaUKQnE95bWZPCPwHK",
side: "BUY",
...}
 eventType = "executionReport"
 eventTime = 1670160185552
 symbol = "ETHBUSD"
 newClientOrderId = "x-U5D79M5BWupab1WDaUKQnE95bWZPCPwHK"
 side = "BUY"
 orderType = "MARKET"
 cancelType = "GTC"
 quantity = 0.1
 price = 0
 stopPrice = 0
 icebergQuantity = 0
 orderListId = -1
 originalClientOrderId = ""
 executionType = "NEW"
 orderStatus = "NEW"
 rejectReason = "NONE"
 orderId = 10935556
 lastTradeQuantity = 0
 accumulatedQuantity = 0
 lastTradePrice = 0
 commission = 0
 commissionAsset = null
 tradeTime = 1670160185552
 tradeId = -1
 ignoreThis1 = 23749654
 isOrderOnBook = true
 isMaker = false
 ignoreThis2 = false
 orderCreationTime = 1670160185552
 cumulativeQuoteAssetTransactedQty = 0
 lastQuoteAssetTransactedQty = 0
 orderQuoteQty = 0
 wsMarket = "spot"
 wsKey = "spot_userData__D0MFsEyS1hPNVDQ3e5HBJ0iA1b6SFwJPjJ5yzojxSCOTDCSdjyeve4MvpSSz"



eventType = "outboundAccountPosition"
eventTime = 1670160185552
lastUpdateTime = 1670160185552
balances = Array(2) [Object,
Object]
 0 = Object {asset: "BUSD",
availableBalance: 8934.3919,
onOrderBalance: 0}
 1 = Object {asset: "ETH",
availableBalance: 100.2,
onOrderBalance: 0}
 length = 2
 [[Prototype]] = Array(0)
wsMarket = "spot"
wsKey = "spot_userData__D0MFsEyS1hPNVDQ3e5HBJ0iA1b6SFwJPjJ5yzojxSCOTDCSdjyeve4MvpSSz"




### on wsClient.on('formattedUserDataMessage' stream - type:  WsUserDataEvents

eventType = "executionReport"
eventTime = 1670160185552
symbol = "ETHBUSD"
newClientOrderId = "x-U5D79M5BWupab1WDaUKQnE95bWZPCPwHK"
side = "BUY"
orderType = "MARKET"
cancelType = "GTC"
quantity = 0.1
price = 0
stopPrice = 0
icebergQuantity = 0
orderListId = -1
originalClientOrderId = ""
executionType = "NEW"
orderStatus = "NEW"
rejectReason = "NONE"
orderId = 10935556
lastTradeQuantity = 0
accumulatedQuantity = 0
lastTradePrice = 0
commission = 0
commissionAsset = null
tradeTime = 1670160185552
tradeId = -1
ignoreThis1 = 23749654
isOrderOnBook = true
isMaker = false
ignoreThis2 = false
orderCreationTime = 1670160185552
cumulativeQuoteAssetTransactedQty = 0
lastQuoteAssetTransactedQty = 0
orderQuoteQty = 0
wsMarket = "spot"
wsKey = "spot_userData__D0MFsEyS1hPNVDQ3e5HBJ0iA1b6SFwJPjJ5yzojxSCOTDCSdjyeve4MvpSSz"




data = Object {eventType: "outboundAccountPosition",
eventTime: 1670160185552,
lastUpdateTime: 1670160185552,
balances: Array(2),
wsMarket: "spot",
...}
 eventType = "outboundAccountPosition"
 eventTime = 1670160185552
 lastUpdateTime = 1670160185552
 balances = Array(2) [Object,
Object]
  0 = Object {asset: "BUSD",
availableBalance: 8934.3919,
onOrderBalance: 0}
  1 = Object {asset: "ETH",
availableBalance: 100.2,
onOrderBalance: 0}
  length = 2
  [[Prototype]] = Array(0)
 wsMarket = "spot"
 wsKey = "spot_userData__D0MFsEyS1hPNVDQ3e5HBJ0iA1b6SFwJPjJ5yzojxSCOTDCSdjyeve4MvpSSz"


































# todo ftx to binance app conversion:







{
symbol: "BTC",
side: "BUY",
type: "LIMIT",
quantity: 1,
price:1.2,




}

{
symbol: "BTC",
side: "BUY",
type: "MARKET",
quantity: 1,
}



// setup rest client:


const { MainClient } = require('binance')

const apiKey = process.env.APIKEY || 'APIKEY';
const apiSecret = process.env.APISECRET || 'APISECRET';

const client = new MainClient({
  api_key: apiKey,
  api_secret: apiSecret,
});




try {

await client.getBalances()

} catch e {
console.log(e)

}




// setup websocket:

const { WebsocketClient } = require('binance');
const wsClient = new WebsocketClient(
  {

  }
);




// subscribe to trades events:


wsClient.on('message', (data) => {
  console.log('raw message received ', JSON.stringify(data, null, 2));
});

function handleSpotAggregateTrades(event, data){

    if(event === "aggTrade"){

    }





}

wsClient.subscribeSpotAggregateTrades("BTCBUSD")

raw message received  {
  "e": "aggTrade",
  "E": 1668452737029,
  "s": "BTCBUSD",
  "a": 525702254,
  "p": "16603.72000000",
  "q": "0.00006000",
  "f": 620737826,
  "l": 620737826,
  "T": 1668452737029,
  "m": true,
  "M": true,
  "wsMarket": "spot",
  "wsKey": "spot_aggTrade_btcbusd_"
}














## client.getBalances()

Object {coin: "BNB", depositAllEnable: true, withdrawAllEnable: true, name: "BNB", free: "0.000088", ...}
coin = "BNB"
depositAllEnable = true
withdrawAllEnable = true
name = "BNB"
free = "0.000088"
locked = "0"
freeze = "0"
withdrawing = "0"
ipoing = "0"
ipoable = "0"
storage = "0"
isLegalMoney = false
trading = true
networkList = Array(3) [Object, Object, Object]
[[Prototype]] = Object
Object {coin: "BUSD", depositAllEnable: true, withdrawAllEnable: true, name: "BUSD", free: "0.07803992", ...}
coin = "BUSD"
depositAllEnable = true
withdrawAllEnable = true
name = "BUSD"
free = "0.07803992"
locked = "0"
freeze = "0"
withdrawing = "0"
ipoing = "0"
ipoable = "0"
storage = "0"
isLegalMoney = false
trading = true
networkList = Array(5) [Object, Object, Object, Object, Object]
[[Prototype]] = Object


